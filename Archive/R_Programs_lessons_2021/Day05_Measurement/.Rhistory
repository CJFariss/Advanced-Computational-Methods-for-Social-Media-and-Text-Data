## load library
library(rstan) # load rstan library
library(MASS) # load library with truehist function
## -------------------------------------------------- #
## define STAN model
## -------------------------------------------------- #
model <- "
parameters {
real mu;
}
model {
mu ~ normal(0,1);
}
"
## set time start variable
time1 <- Sys.time()
## fit stan model
fit <- stan(model_code = model, iter = 1000, chains = 4)
## calculate the duration of the program file up to this point
print(Sys.time() - time1)
## extract draws from stan model object (creates a list object)
output <- extract(fit, permuted = TRUE)
## extract draws from stan model object (creates a list object)
output <- extract(fit, permuted = TRUE)
## print names of each element/slot in the list
names(output)
## print model fit object
fit
## there are number of methods to subset and summarize parameters
## keep in mind that the output object is a list that contains vectors or matrices of posterior estimates for each of the named parameter defined in the model statement above
## lapply (list-apply) a function to all of the objects in the list
lapply(output, mean)
lapply(output, sd)
## create a matrix using some of the named slots in the list
model_parameters <- as.matrix(fit, pars = c("mu"))
?as.matrix
## check the dimensions (they should be the same)
dim(model_predictions)
## create a matrix using some of the named slots in the list
model_parameters <- as.matrix(fit, pars = c("mu"))
## check the dimensions (they should be the same)
dim(model_predictions)
length(output$mu)
## check the dimensions (they should be the same)
dim(model_predictions)
## make a nice plot
#par(mfrow=c(2,2))
truehist(output$mu)
## set data for simulation
y <- 1:5
n <- length(y)
y
n
## create data list
data <- list(y = y, n=n)
data
## set time start variable
time1 <- Sys.time()
# fit stan model
fit <- stan(model_code = model, data = data, iter = 1000, chains = 4)
## calcuate the duration of the program file up to this point
print(Sys.time() - time1)
## extract draws from stan model object (creates a list object)
output <- extract(fit, permuted = TRUE)
## print names of each element/slot in the list
names(output)
## print model fit object
fit
## lapply (list-apply) a function to all of the objects in the list
lapply(output, mean)
lapply(output, sd)
## simulate x1 and set the "true" population values alpha and beta
n <- 100
x <- rnorm(n,0,1)
?rnorm
alpha <- 1.25 # true population parameter
beta <- 2.50 # true population parameter
## systematic component of the model
xb <- alpha + beta * x
## transform the linear term xb using
## the inverse logit function
## so that theta is bound from 0 to 1
pi <- 1 / (1 + exp(-xb))
## generate the dependent variable y with probability inv.theta and measurment error from a Bernoulli trial
y <- rbinom(n, size=1, prob=pi)
## create data list
data <- list(y = y, x=x, n=n)
summary(glm(y~x, family=binomial(link="logit")))
## fit stan model
fit <- stan(model_code = model, data = data, iter = 1000, chains = 4)
## extract draws from stan model object
output <- extract(fit, permuted = TRUE)
## print names
names(output)
## there are number of methods to subset and summarize parameters
## keep in mind that the output object is a list that contains vectors or matrices of of posterior estimates for each of the named parameter defined in the model statement above
## lapply (list-apply) a function to all of the objects in the list
lapply(output, mean)
## extract draws from stan model object
output <- extract(fit, permuted = TRUE)
## print names
names(output)
## there are number of methods to subset and summarize parameters
## keep in mind that the output object is a list that contains vectors or matrices of of posterior estimates for each of the named parameter defined in the model statement above
## lapply (list-apply) a function to all of the objects in the list
lapply(output, mean)
lapply(output, sd)
## tabulate the simulated binary dependent variable it should be very close to the mean value of the predicted y
table(y)
## create a matrix using some of the named slots in the list
model_parameters <- as.matrix(fit, pars = c("alpha", "beta"))
## -------------------------------------------------- ##
## define STAN model
## -------------------------------------------------- ##
model <- "
data {
// declared the data in memory
int<lower=0> n;  # number of observations is integer equal to or greater than 0
int<lower=0, upper=1> y[n];   # values of y are integer: It is either 0 or 1
vector[n] x; # values of underlying latent trait will be stored as a vector of length n
}
// declared the parameters in memory
parameters {
real alpha;  # Hwayong Q: floating point precision type? Does this just mean real number?
real beta;
}
model {
// priors (these are variances not precision)
alpha ~ normal(0,10); # alpha has a normal distribution with mean 0 and variance 10
beta ~ normal(0,10);
// likelihood (link data to some combination of parameters and more data)
y ~ bernoulli_logit(alpha + beta * x);
}
generated quantities {
// posterior predictions
vector[n] y_predict;  # values of posterior predictive values of observed variable will be stored as a vector of length n
// the loop is necessary within the generated quantities block
for(i in 1:n){
y_predict[i] = bernoulli_logit_rng(alpha + beta * x[i]);  # for each observation i=1,...,n, the predicted value will be calculated using a logistic function
}
}
"
## simulate x1 and set the "true" population values alpha and beta
n <- 100
x <- rnorm(n,0,1)  # generates random deviates, underlying latent traits
alpha <- 1.25 # true population parameter
beta <- 2.50 # true population parameter
## systematic component of the model
xb <- alpha + beta * x
## transform the linear term xb using
## the inverse logit function
## so that theta is bound from 0 to 1
pi <- 1 / (1 + exp(-xb))
## generate the dependent variable y with probability inv.theta and measurment error from a Bernoulli trial
y <- rbinom(n, size=1, prob=pi)
## create data list
data <- list(y = y, x=x, n=n)  # y = observed, x = latent
## fit linear model
summary(glm(y~x, family=binomial(link="logit")))
## fit stan model
fit <- stan(model_code = model, data = data, iter = 1000, chains = 4)
## extract draws from stan model object
output <- extract(fit, permuted = TRUE)
## print names
names(output)
## there are number of methods to subset and summarize parameters
## keep in mind that the output object is a list that contains vectors or matrices of of posterior estimates for each of the named parameter defined in the model statement above
## lapply (list-apply) a function to all of the objects in the list
lapply(output, mean)
lapply(output, sd)  # Hwayong Q: What is lp?
## tabulate the simulated binary dependent variable it should be very close to the mean value of the predicted y
table(y)
table(y_predict)
table(output$y_predict)
## create a matrix using some of the named slots in the list
model_parameters <- as.matrix(fit, pars = c("alpha", "beta"))
model_predictions <- as.matrix(fit, pars = "y_predict")
## check the dimensions (they should be the same)
dim(model_predictions)
dim(output$y_predict)
## plot the simulated y variable and the estimated posterior means
plot(y, apply(model_predictions,2,mean))
lapply(output, sd)  # Hwayong Q: What is lp?
## there are number of methods to subset and summarize parameters
## keep in mind that the output object is a list that contains vectors or matrices of of posterior estimates for each of the named parameter defined in the model statement above
## lapply (list-apply) a function to all of the objects in the list
lapply(output, mean)
