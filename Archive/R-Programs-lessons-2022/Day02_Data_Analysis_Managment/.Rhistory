seq(from=1, to=5, length.out=100)
## it might also be useful to generate a vector of the same value n number of times
## that is we might want to replicate a specific value n times using rep()
rep(1,10)
## it might also be useful to generate a vector of the same value n number of times
## that is we might want to replicate a specific value n times using rep()
rep(1,10)
## it might also be useful to generate a vector of the same value n number of times
## that is we might want to replicate a specific value n times using rep()
rep(1+7,10)
## we can replicate values from another vector
rep(c(1,2,3), times=2)
## notice the difference between using the times argument compared to the each argument
rep(c(1,2,3), each=2)
## a matrix is just a 2D array (note that byrow=FALSE by default so that the values are added one column at a time from left to right)
m <- matrix(NA, nrow=2, ncol=3)
m
m <- matrix( c(1,2,3,4,5,6), nrow=2, ncol=3)
m
## covert the matrix back into a vector (note the order of the values)
c(m)
## this is the same function as above but the values are added one row at at time from top to bottom
m <- matrix( c(1,2,3,4,5,6), nrow=2, ncol=3, byrow = TRUE)
m
## covert the matrix back into a vector (note the order of the values)
c(m)
## 2D arrays using the array function which produces the same object as matrix( c(1,2,3,4,5,6), nrow=2, ncol=3)
m <- array(NA, dim=c(2,3))
m
## 2D arrays using the array function which produces the same object as matrix( c(1,2,3,4,5,6), nrow=2, ncol=3, byrow = TRUE)
m <- array( c(1,2,3,4,5,6), dim=c(2,3))
m
## arrays with more than 3 dimensions
m3 <- array( c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18), dim=c(2,3,3))
m3
## covert the array back into a vector
c(m3)
## create a new matrix
mymat <- rbind(c(1,3,4), 5:3, c(100,20,90), 11:13)
mymat
## additional functions to learn about the structure of the object (i.e., is it a matrix)
dim(mymat)
nrow(mymat)
ncol(mymat)
dim(mymat)[2]
dim(mymat)[2]
pi == pi
1 == pi
1 == 2
## we can also ask for the truth status of statements set up to be false
1 != 1
pi != pi
1 != pi
1 != 2
1 == pi & pi == pi
## the above statement returns an equivalent to:
FALSE & TRUE
1 == 1 & pi == pi
## the OR operator looks for at least one condition in a compond set of conditions to be true
## the following statement return TRUE because at least one of the component conditions is TRUE
1 == pi | pi == pi
FALSE | TRUE
## if both statements are true then OR returns TRUE
1 == 1 | pi == pi
TRUE | TRUE
## if both statements are false then OR returns FALSE
1 == pi | 2 == pi
if(TRUE){ print("print this character string") }
if(TRUE | FALSE) print("print this character string")
if(1 == 1 & pi == pi){
print("print this character string")
}
if(1 == pi & pi == pi){
print("print this character string")
}
index <- rnorm(10)
index
for(i in index){
print(i)
}
print(i-i)
## the while loop is constructed to do something as long as a logical condition is TRUE
i <- 0
## is starts at 0
i
## this structure is similar to the for loop in terms of the process; however it ends when a condition is met instead of iterating through the values of an index
while(i <= 10){
i <- i + 1
}
vec1 <- c(1:10)
vec1
## (2) determine the maximum value in the vector
max(vec1)
x==10
vec1==10
table(vec1==10)
## (3) determine the position in the vector at which() the maximum resides (if there is a tie, report both positions)
vec1==10
## (4) determine the second largest max value in the vector
max(vec1-1)
vec1==9
## (6) repeat the same process for the third max value
max(vec1-3)
## (6) repeat the same process for the third max value
max(vec1-2)
which(vec1 == 10)
if(-10){ print(max(vec1)) }
## (4) determine the second largest max value in the vector
vec1 <- vec1[! vec1 %in% c(10)]
max(vec1)
which(vec1 == 9)
## (6) repeat the same process for the third max value
vec1 <- vec1[! vec1 %in% c(9)]
max(vec1)
vec1==max(vec1)
max_first <-which(vec1 == 10)
max_first
which(vec1 == 10)
vec1 <- c(1:10)
vec1
## (2) determine the maximum value in the vector
max(vec1)
which(vec1 == 10)
which(max(vec1))
which(max(vec1)==vec1)
vec1
max(vec1)
max_coords <- which(max(vec1)==vec1) ### ovo mora da se sacuva i posle da se dodaje
max_coords
vec1[max_coords]
max_coords <- c(max_coords, which(max(vec1[-max_coords])==vec1))
max_coords
vec1[max_coords]
sort(vec1, decreasing = TRUE)
order(vec1, decreasing = TRUE)
